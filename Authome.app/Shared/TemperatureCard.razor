<AuthomeCard Icon="fa-temperature-half" Title=@DeviceName AccentColor=@AccentColor>
	<p class="h1">@OutputContent</p>
</AuthomeCard>

@code {
    [Parameter]
    public string DeviceName { get; set; } = "Device";

    [Parameter]
    public string AccentColor { get; set; } = "#de922f";

    [Parameter]
    public TemperatureScale InputScale { get; set; } = TemperatureScale.Celsius;

    [Parameter]
    public TemperatureScale OutputScale { get; set; } = TemperatureScale.Celsius;

    [Parameter]
    public double? InputTemperature { get; set; }

    private double OutputTemperature
    {
        get
        {
            double inputTemp = InputTemperature is null ? 0 : InputTemperature.Value;
            if (InputScale == TemperatureScale.Celsius) {
                if (OutputScale == TemperatureScale.Celsius) return inputTemp;
                else if (OutputScale == TemperatureScale.Fahrenheit) return inputTemp*9/5+32;
                return inputTemp + 273.15;
            } else if (InputScale == TemperatureScale.Fahrenheit) {
                if (OutputScale == TemperatureScale.Celsius) return (inputTemp-32)*5/9;
                else if (OutputScale == TemperatureScale.Fahrenheit) return inputTemp;
                return (inputTemp-32)*5/9+273.15;
            }
            if (OutputScale == TemperatureScale.Celsius) return inputTemp-273.15;
            else if (OutputScale == TemperatureScale.Fahrenheit) return (inputTemp-273.15)*9/5+32;
            return inputTemp;
        }
    }

    private string OutputContent
    {
        get
        {
            if (InputTemperature == null) return "No data available.";
            if (OutputScale == TemperatureScale.Celsius) return $"{OutputTemperature:F2} °C";
            if (OutputScale == TemperatureScale.Fahrenheit) return $"{OutputTemperature:F2} °F";
            return $"{OutputTemperature:F1} °K";
        }
    }

    public enum TemperatureScale
    {
        Celsius,
        Fahrenheit,
        Kelvin
    }
}
